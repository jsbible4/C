1. 포인터의 이해 
    1) 포인터란?
        - 메모리의 주소를 저장하기 위한 변수 
        - 포인터 변수 
    2) & (ampersand) 연산자 
        - 변수의 주소 
    3) 포인터의 선언
        - * (asterisk) 연산자 사용
        - 자료형* 포인터명;
          자료형 *포인터명;
          자료형 * 포인터명;
            - 자료형의 주소를 저장할 수 있는 포인터 변수 선언
    4) 포인터 초기화 
        - 포인터명 = &변수;
        - 변수의 주소를 포인터에 저장함


2. 포인터 사용하기 
    1) 변수는 어디에 있을까?
        - 예) int num = 10;


3. 포인터 변수 선언하기 
    1) 변수가 int 형이면 변수의 메모리 주소를 저장하는 포인터는 int* 형.
    2) 포인터 변수의 크기
        - OS 32비트 포인트 크기는 32비트(4바이트)
        - OS 64비트 포인트 크기는 64비트(8바이트)


4. 역참조 연산자 사용하기 
    - *포인터

    - 포인터를 선언할 때도 *를 사용하고, 역참조를 할 때도 *를 사용.
    - 포인터를 선언할 때 *는 "이 변수가 포인터다"라고 알려줌
    - 포인터에 사용할 때 *는 "포인터의 메모리 주소를 역참조하겠다"라는 의미이다. 

5. 이중 포인터 사용하기 
    1) 자료형 **포인터이름 

6. void* ( void 포인터 )
    1) 자료형이 정해져 있지 않음
    2) void 포인터에는 어떤 자료형으로 된 포인터든 저장할 수 있음. 
    3) 반대로 다양한 자료형으로 된 포인터에도 void 포인터를 저장할 수 있음 
    4) 범용 포인터임 



    Pointer/pointer_variable2.c  만 이해하면 ㅇㅋㅇㅋ