1. 문자열 상수 
    1) 두 글자 이상
    2) 항사 널 문자 ('\0')로 끝남 --> 문자열의 길이보다 항상 1byte 큼
    3) 문자열의 길이가 가변적임 --> 크기가 클 수 있기 때문에 문자열 상수가 저장된 주소의 값으로 처리함 
    4) 문자열 상수가 저장된 시작주소 값을 가지고 있음. 

2. 문자열 처리
    1) 배열을 이용하여 문자열 처리하기 
        - C 언어는 문자열을 처리하는 기본 자료형이 없음. 
        - 문자열은 문자들이 모여 이루어짐 => 문자열 배열 선언 
        - 예)
            char str1[6] = "Hello";

                 str1 -----> 'H' 'e' 'l' 'l' 'o''\0'    (문자열 단위로 초기화)
            char str2[5] = {'H', 'e', 'l', 'l', 'o'};   //\0 이 들어갈 수가 없다. 
                 str2 -----> 'H' 'e' 'l' 'l' 'o'  (문자 단위로 초기화)
    2) 포인터를 이용하여 문자열 처리하기 
        - 문자열 상수는 메모리가 할당되면 그 문자열의 시작주소 값 리턴함
            ==> char* 포인터 변수에 대입 가능함 ==> 단순히 가리키고만 있음
        - 포인터로 문자열을 처리하는 경우 문자열은 읽기 전용이 됨. (주소값 자체를 바꿀 수가 없다.)
        -예)
            char * str = "hello";
                                '0x100'                 '0x105'
                str --------------> 'h' 'e' 'l' 'l' 'o' '\0'
               '0x100'