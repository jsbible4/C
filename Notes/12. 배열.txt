1. 배열(array)
    1) 변수의 확장, 동일한 자료형으로 이루어진 자료를 처리할 때 사용
    2) 같은 자료형의 값들이 연속적으로 하나의 배열명에 모여 있는 것으로
       각각의 자료들은 요소라고 함 (각각 배열 주소가 다 있음. index)
    3) 배열명은 배열의 시작 주소 값을 나타내는 상수포인터임. *******
        - 예
            int arr[5] = {1, 2, 3, 4, 5};
            int *pArr = arr;            // arr 자체가 주소번지를 의미하기 때문에 &를 붙이지 않아도 됨. 


2. 1차원 배열의 선언
    1) 일반 변수와는 달리 첨자[]를 이용하여 여러 개의 변수를 표현함 
    2) 배열 선언 시 요소의 개수는 반드시 정수를 사용해야 함
    3) 배열 요소를 위한 첨자[]는 0에서부터 시작됨
    4) 형식
        - 자료형 배열명[요소의 개수];
        - 예
            int array[10];          //4 바이트짜리 요소 1개 X 10개가 나열된 배열 array 라는 뜻 

3. 배열의 원소 값
    1) 배열의 요소값에 상수 대입
        - 배열명[첨자] = 상수;
    2) 배열의 요소값을 변수에 대입
        - 변수 = 배열명[첨자]
    3) 배열을 초기화 하기 
        - 자료형 배열명[크기] = {요소값1, 요소값2, 요소값3, 요소값4};        // 배열을 다 '값'으로 초기화
            - 예: int numArr[10] = {0, };       // 배열의 요소를 전부 0으로 다 초기화
                  int numArr[] = { 3, 4, 5, 6}  // 이미 4개라는 걸 알 수 있으니까 첨자 생략 가능
                  int numArr[5] = {1, 3, , 4, 5} // 중간 초기값 비워둘 순 없음

4. 배열과 포인터
    1) 배열명도 포인터임. 
        - 배열명은 배열의 시작 주소 값
        - 상수포인터
    2) 1차원 배열명의 포인터 타입 존재함 
        - 배열명이 가리키는 배열 요소이 자료형에 의해 결정됨 
    3) 포인터 연산
        - 포인터 값을 증가 또는 감소시키는 연산
        - 포인터가 가리키는 대상의 자료형에 따라서 증가 및 감소
    4) 배열명과 포인터의 연산
        - 배열명은 배열전체를 대표하는 상수포인터이므로 증감연산을 할 수 없다. 