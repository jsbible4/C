1. 연산자, 우선순위, 결합 순서 
    1) 연산자 우선순위
        - 순위                  연산자                  설명                결합순서
        -------------------------------------------------------------------------
           1                    ()                                     왼쪽 ==> 오른쪽 
                                []                                     왼쪽 ==> 오른쪽
                                .              멤버 직접 선택 연산자        왼쪽 ==> 오른쪽
                                ->             멤버 간접 선택 연산자        왼쪽 ==> 오른쪽
           2                   ++ --           증감 연산자(후위 연산자)      왼쪽 ==> 오른쪽
           3                   ++ --           증감 연산자(후위 연산자)      오른쪽 ==> 왼쪽
           3                    +-              부호 연산자               오른쪽 ==> 왼쪽
           3                    ! ~         논리 / 비트 not 연산자         오른쪽 ==> 왼쪽
           3                    *                간접 참조 연산자
           3                    &                주소 연산자              오른쪽 ==> 왼쪽
           3                  sizeof           sizeof 연산자              오른쪽 ==> 왼쪽
           4                  (자료형)          형변환 연산자                오른쪽 ==> 왼쪽
           5                    * / %           산술 연산자                왼쪽 ==> 오른쪽
           6                   + -              산술 연산자                왼쪽 ==> 오른쪽
           7                    << >>           비트 이동 연산자            왼쪽 ==> 오른쪽
           8                   < <= > >=        관계 연산자                왼쪽 ==> 오른쪽
           9                   ==  !=           관계 연산자                왼쪽 ==> 오른쪽
           10                    &              비트 AND 연산자            왼쪽 ==> 오른쪽
           11                    |              비트 OR 연산자             왼쪽 ==> 오른쪽
           12                    ^              비트 XOR 연산자            왼쪽 ==> 오른쪽
           13                    &&             논리 AND 연산자            왼쪽 ==> 오른쪽
           14                    ||             논리 OR 연산자             왼쪽 ==> 오른쪽
           15                    ?  :           조건 연산자                오른쪽 ==> 왼쪽
           16       =  +=  -= *= /= %= <<=      대입 연산자, 복합 대입 연산자  오른쪽 ==> 왼쪽
           17                    ,              콤마 연산자                왼쪽 ==> 오른쪽 

2. 나머지(%) 연산하기 
    1) 나눗셈과 깊은 관계가 있음 
    2) 실수끼리 계산을 하면 결과는 실수가 나옴.
       정수끼리 계산을 하면 결과는 정수가 나옴.
        - 7 % 2 = 1

3. 비트 연산자
    1) 메모리에 비트 단위로 저장되어 있는 값을 조작하거나 연산을 실행
        - 플래그(flag)
            - 깃발을 올리면 on(1), 깃발을 내리면 off(0)
    2) 구분
        - 비트 이동 (bit shift) 연산자
            - <<
                - a << n : a에 저장된 값에 대해서 n비트 만큼 왼쪽으로 시프트 
            - >>
                - a >> n : a에 저장된 값에 대해서 n비트 만큼 오른쪽으로 시프트
            - ^
                - a^b : a에 저장된 값고 b에 저장된 값의 비트단위 배타적 논리합(XOR)
        - 비트 연산자
            - ~
                - ~a : a에 저장된 값에 대한 1의 보수 (1은 0으로, 0은 1로 바꿈)
            - &
                - a&b : a에 저장된 값과 b에 저장된 값의 비트단윈 논리곱 (AND)
            - |
                - a|b : a에 저장된 값과 b에 저장된 값의 비트단위 논리합 (OR)

4. 증(가)감(소) 연산자
    1) 변수 ++, ++ 변수 

5. 복합 대입 연산자
    1) 연산과 대입을 한 번에 쓰는 것
    2) 표기법 
        - 변수 op= 표현식
        - 변수 = 변수 op 표현식

        - +=        오른쪽의 더한 값을 왼쪽에 대입
          -=        뺀 값을 왼쪽에 대입
          *=        곱한 값을 왼쪽에 대입
          /=        나눈 값을 왼쪽에 대입 (몫)
          %=        나머지 값을 왼쪽에 대입

        - 예)
            int n = 3;
            n += 4;     // n = n + 4;

6. 관계(비교) 연산자를 
    1) 참과 거짓을 판별하는 연산자를
    2) 비교가 참인 경우는 결과는 1, 거짓인 경우는 0이 됨. 

7. 논리 연산자
    1) 비교 연산자와 함께 자주 사용되는 연산자
    2) 여러 조건을 동시에 검사할 때 주로 사용되는 연산자
    3) 종류
        - &&        AND         조건식이 모두 참일 때만 참
          ||        OR          조건식 중 하나라도 참이면 참 
           !        NOT         참이면 거짓, 거짓이면 참 (반대로 뒤집어주기)

8. 비트 연산자
    1) 2진수로 변환하여 비트 단위 연산을 수행하는 연산자
    2) 주로 하드웨어를 직접 제어할 때 이용됨.
    3) 종류
        - &     비트단위 AND
          |     비트단위 OR
          ^     비트단위 XOR (둘이 다를 때 1 반환, 같으면 0 반환)
          ~     비트단위 NOT

9. 조건 연산자 (상황 연산자)
    1) 조건을 판별하여 조건이 참인 경우 참을 실행하고, 조건이 거짓인 경우 거짓을 수행함 
    2) 조건 ? 참 : 거짓; 